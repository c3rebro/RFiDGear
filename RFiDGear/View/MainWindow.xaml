<?xml version="1.0" encoding="utf-8"?>
<Window
	x:Class="RFiDGear.MainWindow" 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:dlgs="clr-namespace:MvvmDialogs.Behaviors;assembly=MVVMDialogs"
    
	dlgs:DialogBehavior.DialogViewModels="{Binding Dialogs}" 
    xmlns:local="clr-namespace:RFiDGear" 
    xmlns:m="clr-namespace:RFiDGear.Model" 
    xmlns:vm="clr-namespace:RFiDGear.ViewModel" 
    xmlns:dal="clr-namespace:RFiDGear.DataAccessLayer"
    
	x:Name="homeWindow"
	mc:Ignorable="d"
	Title="RFiDGear"
	FontFamily="Segoe UI"
	HorizontalContentAlignment="Left"
	SizeToContent="Manual"
	WindowStartupLocation="CenterScreen"
	FontWeight="Normal"
	MouseLeftButtonDown="WindowMouseLeftButtonDown"
	DataContext="{Binding Source={StaticResource Locator}, Path=MainWin}"
	MinWidth="900"
	MinHeight="500"
	Height="500"
	Width="900">
	<Window.InputBindings>
		<KeyBinding
			Key="Escape"
			Command="{Binding CloseApplication}" />
		<KeyBinding
			Key="F1"
			Command="{Binding ShowHelpCommand}" />
		<KeyBinding
			Modifiers="Control"
			Key="R"
			Command="{Binding ReadChipCommand}" />
		<KeyBinding
			Modifiers="Control"
			Key="O"
			Command="{Binding NewOpenFileDialogCommand}" />
		<KeyBinding
			Modifiers="Control"
			Key="S"
			Command="{Binding SaveTaskDialogCommand}" />
		<KeyBinding
			Modifiers="Control"
			Key="X"
			Command="{Binding WriteToChipOnceCommand}" />
		<KeyBinding
			Modifiers="Control"
			Key="Q"
			Command="{Binding ExecuteQuickCheckCommand}" />
	</Window.InputBindings>
	<!--
	WindowStyle="None"
	ResizeMode="CanResizeWithGrip"
	AllowsTransparency="True"
	BorderThickness="1"
	BorderBrush="Black"
	Opacity="0.98"
 	-->
	<Window.Resources>
		<dal:BindingProxy
			x:Key="proxy"
			Data="{Binding}" />
		<dal:ResourceLoader
			x:Key="Localization" />
		<ContextMenu
			x:Key="RowMenu"
			ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Path=DataContext.RowContextMenu}">
			<ContextMenu.ItemContainerStyle>
				<Style
					TargetType="MenuItem">
					<Setter
						Property="HorizontalContentAlignment"
						Value="Left" />
					<Setter
						Property="VerticalContentAlignment"
						Value="Center" />
				</Style>
			</ContextMenu.ItemContainerStyle>
		</ContextMenu>
	</Window.Resources>
	<Grid>
		<Grid
			Grid.Column="0"
			Grid.Row="0"
			HorizontalAlignment="Stretch"
			VerticalAlignment="Stretch"
			Margin="15,36,8,40">
			<Grid.ColumnDefinitions>
				<ColumnDefinition
					Width="auto"
					MinWidth="200" />
				<ColumnDefinition
					Width="5" />
				<ColumnDefinition
					Width="*" />
			</Grid.ColumnDefinitions>
			<TreeView
				Grid.Column="0"
				Grid.Row="0"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Stretch"
				Margin="0,0,3,0"
				x:Name="treeViewOnline"
				ItemsSource="{Binding TreeViewParentNodes}"
				Background="Transparent"
				BorderThickness="1,1,1,1"
				MouseLeftButtonDown="MainWindowTreeViewControlMouseButtonDown"
				MouseRightButtonDown="MainWindowTreeViewControlMouseButtonDown">
				<TreeView.ItemContainerStyle>
					<!-- This Style binds a TreeViewItem to a TreeViewModelBase. -->
					<Style
						TargetType="{x:Type TreeViewItem}">
						<Setter
							Property="IsExpanded"
							Value="{Binding IsExpanded,  UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />
						<Setter
							Property="IsSelected"
							Value="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />
						<Setter
							Property="FontWeight"
							Value="Normal" />
						<!--<Setter Property="ContextMenu" Value="{StaticResource RowMenu}" />-->
						<!--<Setter
							Property="IsSelected"
							Value="{Binding DataContext.IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />-->
						<Style.Triggers>
							<Trigger
								Property="IsSelected"
								Value="True">
								<Setter
									Property="FontWeight"
									Value="Bold" />
								<Setter
									Property="Background"
									Value="White" />
							</Trigger>
						</Style.Triggers>
					</Style>
				</TreeView.ItemContainerStyle>
				<TreeView.Resources>
					<!--					<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
                      Color="White" />
					<SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}"
                      Color="Black" />
					<FontWeightConverter x:Key="{x:Static FontWeights.Bold}" />-->
                    <HierarchicalDataTemplate
						DataType="{x:Type vm:RFiDChipParentLayerViewModel}"
						ItemsSource="{Binding Children}">
						<!-- <Image Width="16" Height="16" Margin="3,0" Source="Images\Region.png" /> -->
						<HierarchicalDataTemplate.Resources>
							<Style
								TargetType="TextBlock">
								<Style.Triggers>
									<DataTrigger
										Binding="{Binding IsBeingProgrammed}"
										Value="True">
										<Setter
											Property="Background"
											Value="Yellow" />
										<Setter
											Property="FontWeight"
											Value="Normal" />
									</DataTrigger>
									<DataTrigger
										Binding="{Binding IsBeingProgrammed}"
										Value="False">
										<Setter
											Property="Background"
											Value="Red" />
										<Setter
											Property="FontWeight"
											Value="Normal" />
									</DataTrigger>
									<DataTrigger
										Binding="{Binding IsProgrammingCompletedSuccessfully}"
										Value="True">
										<Setter
											Property="Background"
											Value="Green" />
										<Setter
											Property="FontWeight"
											Value="Normal" />
									</DataTrigger>
									<DataTrigger
										Binding="{Binding IsProgrammingCompletedSuccessfully}"
										Value="False">
										<Setter
											Property="Background"
											Value="Red" />
										<Setter
											Property="FontWeight"
											Value="Normal" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</HierarchicalDataTemplate.Resources>
						<TextBlock
							Text="{Binding ParentNodeHeader}">
							<TextBlock.ContextMenu>
								<ContextMenu
									ItemsSource="{Binding ContextMenu}"></ContextMenu>
							</TextBlock.ContextMenu>
						</TextBlock>
					</HierarchicalDataTemplate>
                    <HierarchicalDataTemplate
						DataType="{x:Type vm:RFiDChipChildLayerViewModel}"
						ItemsSource="{Binding Children}">
						<HierarchicalDataTemplate.Resources>
							<Style
								TargetType="TextBlock">
								<Style.Triggers>
									<DataTrigger
										Binding="{Binding IsAuthenticated}"
										Value="True">
										<Setter
											Property="Foreground"
											Value="Green" />
										<Setter
											Property="FontWeight"
											Value="Bold" />
									</DataTrigger>
									<DataTrigger
										Binding="{Binding IsAuthenticated}"
										Value="False">
										<Setter
											Property="Foreground"
											Value="Red" />
										<Setter
											Property="FontWeight"
											Value="Normal" />
									</DataTrigger>
									<DataTrigger
										Binding="{Binding IsTask}"
										Value="True">
										<Setter
											Property="Foreground"
											Value="DarkViolet" />
										<Setter
											Property="FontWeight"
											Value="Bold" />
									</DataTrigger>
									<DataTrigger
										Binding="{Binding IsTask}"
										Value="False">
										<Setter
											Property="Foreground"
											Value="Green" />
										<Setter
											Property="FontWeight"
											Value="Bold" />
									</DataTrigger>
									<DataTrigger
										Binding="{Binding HasChanged}"
										Value="True">
										<Setter
											Property="Foreground"
											Value="DarkViolet" />
										<Setter
											Property="FontWeight"
											Value="Bold" />
									</DataTrigger>
									<DataTrigger
										Binding="{Binding HasChanged}"
										Value="False">
										<Setter
											Property="Foreground"
											Value="Green" />
										<Setter
											Property="FontWeight"
											Value="Bold" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</HierarchicalDataTemplate.Resources>
						<!-- <Image Width="16" Height="16" Margin="3,0" Source="Images\State.png" /> -->
						<TextBlock
							Text="{Binding ChildNodeHeader}">
							<TextBlock.ContextMenu>
								<ContextMenu
									ItemsSource="{Binding ContextMenu}"></ContextMenu>
							</TextBlock.ContextMenu>
						</TextBlock>
					</HierarchicalDataTemplate>
					<HierarchicalDataTemplate
						DataType="{x:Type vm:RFiDChipGrandChildLayerViewModel}"
						ItemsSource="{Binding Children}">
						<!-- <Image Width="16" Height="16" Margin="3,0" Source="Images\City.png" /> -->
						<TextBlock
							Text="{Binding GrandChildNodeHeader}">
							<TextBlock.Resources>
								<Style
									TargetType="TextBlock">
									<Style.Triggers>
										<DataTrigger
											Binding="{Binding IsAuthenticated}"
											Value="True">
											<Setter
												Property="Foreground"
												Value="Green" />
											<Setter
												Property="FontWeight"
												Value="Bold" />
										</DataTrigger>
										<DataTrigger
											Binding="{Binding IsAuthenticated}"
											Value="False">
											<Setter
												Property="Foreground"
												Value="Red" />
											<Setter
												Property="FontWeight"
												Value="Normal" />
										</DataTrigger>
										<!--
										<DataTrigger
											Binding="{Binding IsVisible}"
											Value="True">
											<Setter
												Property="Visibility"
												Value="Visible" />
										</DataTrigger>
										<DataTrigger
											Binding="{Binding IsVisible}"
											Value="False">
											<Setter
												Property="Visibility"
												Value="Hidden" />
										</DataTrigger>
									 -->
									</Style.Triggers>
								</Style>
							</TextBlock.Resources>
						</TextBlock>
					</HierarchicalDataTemplate>
					<DataTemplate
						DataType="{x:Type vm:RFiDChipGrandGrandChildLayerViewModel}">
						<!-- <Image Width="16" Height="16" Margin="3,0" Source="Images\City.png" /> -->
						<TextBlock
							Text="{Binding GrandGrandChildNodeHeader}">
							<TextBlock.Resources>
								<Style
									TargetType="TextBlock">
									<Style.Triggers>
										<DataTrigger
											Binding="{Binding IsAuthenticated}"
											Value="True">
											<Setter
												Property="Foreground"
												Value="Green" />
											<Setter
												Property="FontWeight"
												Value="Bold" />
										</DataTrigger>
										<DataTrigger
											Binding="{Binding IsAuthenticated}"
											Value="False">
											<Setter
												Property="Foreground"
												Value="Red" />
											<Setter
												Property="FontWeight"
												Value="Normal" />
										</DataTrigger>
										<!--
										<DataTrigger
											Binding="{Binding IsVisible}"
											Value="True">
											<Setter
												Property="Visibility"
												Value="Visible" />
										</DataTrigger>
										<DataTrigger
											Binding="{Binding IsVisible}"
											Value="False">
											<Setter
												Property="Visibility"
												Value="Hidden" />
										</DataTrigger>
									 -->
									</Style.Triggers>
								</Style>
							</TextBlock.Resources>
						</TextBlock>
					</DataTemplate>
				</TreeView.Resources>
			</TreeView>
			<GridSplitter
				ResizeBehavior="PreviousAndNext"
				ResizeDirection="Auto"
				Background="#FFD9D9DB"
				Margin="0,0,0,0"
				VerticalAlignment="Stretch"
				HorizontalAlignment="Stretch"
				Grid.Row="0"
				Grid.Column="1"
				Width="5" />
			<DataGrid
				x:Name="myDataGrid"
				ItemsSource="{Binding ChipTasks.TaskCollection}"
				SelectedItem="{Binding Path=DataContext.SelectedSetupViewModel, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
				AutoGenerateColumns="False"
				CanUserReorderColumns="True"
				AlternatingRowBackground="LightGray"
				CanUserAddRows="False"
				SelectionMode="Single"
				CanUserSortColumns="True"
				Background="Transparent"
				Grid.Column="2"
				Grid.Row="0"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Stretch"
				Margin="3,0,0,0">
				<DataGrid.Resources>
					<SolidColorBrush
						x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}"
						Color="DodgerBlue" />
					<ContextMenu
						x:Key="RowMenu"
						ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Path=DataContext.RowContextMenu}">
						<ContextMenu.ItemContainerStyle>
							<Style
								TargetType="MenuItem">
								<Setter
									Property="HorizontalContentAlignment"
									Value="Left" />
								<Setter
									Property="VerticalContentAlignment"
									Value="Center" />
							</Style>
						</ContextMenu.ItemContainerStyle>
					</ContextMenu>
				</DataGrid.Resources>
				<DataGrid.RowStyle>
					<Style
						TargetType="{x:Type DataGridRow}">
						<Setter
							Property="ContextMenu"
							Value="{StaticResource RowMenu}" />
					</Style>
				</DataGrid.RowStyle>
				<DataGrid.RowHeaderTemplate>
					<DataTemplate>
						<Image
							x:Name="editImage"
							VerticalAlignment="Center"
							HorizontalAlignment="Center"
							Width="16"
							Margin="1,0"></Image>
						<DataTemplate.Triggers>
							<DataTrigger
								Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=DataGridRow}, Path=DataContext.IsTaskCompletedSuccessfully}"
								Value="True">
								<Setter
									TargetName="editImage"
									Property="Source"
									Value="/RFiDGear;component/Resources/confirm.ico" />
							</DataTrigger>
							<DataTrigger
								Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=DataGridRow}, Path=DataContext.IsTaskCompletedSuccessfully}"
								Value="False">
								<Setter
									TargetName="editImage"
									Property="Source"
									Value="/RFiDGear;component/Resources/error.ico" />
							</DataTrigger>
							<DataTrigger
								Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=DataGridRow}, Path=DataContext.IsTaskCompletedSuccessfully}"
								Value="{x:Null}">
								<Setter
									TargetName="editImage"
									Property="Source"
									Value="/RFiDGear;component/Resources/wait.ico" />
							</DataTrigger>
						</DataTemplate.Triggers>
					</DataTemplate>
				</DataGrid.RowHeaderTemplate>
				<DataGrid.Columns>
					<!-- <DataGridTextColumn
					Header="{Binding Data.LocalizationResourceSet,
					Converter={StaticResource Localization},
					ConverterParameter='dataGridHeaderUnlockEventConfigDialogTriggerType',
					Source={StaticResource proxy}}"
					IsReadOnly="True"
					Binding="{Binding Path=DoorMonitoringTrigger, Converter={StaticResource Localization}, ConverterParameter={x:Type local:DoorMonEventType}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />  -->
					<DataGridTextColumn
						Header="{Binding Data.LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='dataGridHeaderMainWindowTaskIndex',Source={StaticResource proxy}}"
						IsReadOnly="True"
						Binding="{Binding Path=SelectedTaskIndex}">
						<DataGridTextColumn.HeaderStyle>
							<Style
								TargetType="{x:Type DataGridColumnHeader}">
								<Setter
									Property="HorizontalContentAlignment"
									Value="Center" />
							</Style>
						</DataGridTextColumn.HeaderStyle>
						<DataGridTextColumn.ElementStyle>
							<Style
								TargetType="{x:Type TextBlock}">
								<Setter
									Property="HorizontalAlignment"
									Value="Center" />
							</Style>
						</DataGridTextColumn.ElementStyle>
					</DataGridTextColumn>
					<DataGridTextColumn
						Header="{Binding Data.LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='dataGridHeaderMainWindowTaskType',Source={StaticResource proxy}}"
						IsReadOnly="True"
						Binding="{Binding Path=SelectedTaskType, Converter={StaticResource Localization}}" />
					<DataGridTextColumn
						Header="{Binding Data.LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='dataGridHeaderMainWindowTaskDescription',Source={StaticResource proxy}}"
						IsReadOnly="True"
						Binding="{Binding Path=SelectedTaskDescription}" />
				</DataGrid.Columns>
			</DataGrid>
		</Grid>
		<DockPanel
			RenderTransformOrigin="0.5,0.5">
			<Menu
				DockPanel.Dock="Top"
				Background="{x:Null}"
				HorizontalContentAlignment="Right">
				<MenuItem
					Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemFileHeader' }"
					VerticalContentAlignment="Center"
					VerticalAlignment="Top">
					<MenuItem
						Command="{Binding NewOpenFileDialogCommand}"
						InputGestureText="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemShortcutOpenProject'}"
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemOpenProject'}" />
					<MenuItem
						Command="{Binding SaveTaskDialogCommand}"
						InputGestureText="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemShortcutSaveTask'}"
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemSaveTask'}" />
					<MenuItem
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemSaveChip' }"
						Command="{Binding SaveChipDialogCommand}"></MenuItem>
					<Separator />
					<MenuItem
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemExitHeader' }"
						Command="{Binding CloseApplication}"></MenuItem>
				</MenuItem>
				<!-- File -->
				<MenuItem
					Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemEditHeader' }"
					VerticalContentAlignment="Center"
					VerticalAlignment="Top">
					<MenuItem
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemCreateTaskHeader' }">
						<MenuItem
							Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemMifareHeader' }">
							<MenuItem
								Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemAddEditMifareClassicTaskHeader' }"
								Command="{Binding CreateClassicTaskCommand}"></MenuItem>
							<MenuItem
								Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemAddEditMifareDesfireTaskHeader' }"
								Command="{Binding CreateDesfireTaskCommand}"></MenuItem>
							<MenuItem
								Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemAddEditMifarePlusTaskHeader' }"
								IsEnabled="False"></MenuItem>
							<MenuItem
								Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemAddEditMifareSAMTaskHeader' }"
								IsEnabled="False"></MenuItem>
							<MenuItem
								Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemAddEditMifareUltralightTaskHeader' }"
								Command="{Binding CreateUltralightTaskCommand}"></MenuItem>
						</MenuItem>
						<MenuItem
							Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemTagItHeader' }"
							IsEnabled="False">
							<MenuItem
								Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemAddEditTagitHFIPlusTaskHeader' }"
								IsEnabled="False"></MenuItem>
						</MenuItem>
					</MenuItem>
					<Separator />
					<MenuItem
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemRemoveCardsHeader' }"
						Command="{Binding RemoveChipsFromTreeCommand}"></MenuItem>
				</MenuItem>
				<!-- Edit -->
				<MenuItem
					Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemProgrammingHeader' }"
					VerticalContentAlignment="Center"
					VerticalAlignment="Top"
					RenderTransformOrigin="0.5,0.5">
					<MenuItem
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemReadChipPublic'}"
						InputGestureText="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemShortcutReadChipPublic'}"
						Command="{Binding ReadChipCommand}" />
					<MenuItem
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemExecuteQuickCheck'}"
						InputGestureText="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemShortcutExecuteQuickCheck'}"
						Command="{Binding ExecuteQuickCheckCommand}" />
					<Separator />
					<MenuItem
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemRunAllTasksOnce' }"
						InputGestureText="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemShortcutWriteToChipOnce'}"
						Command="{Binding WriteToChipOnceCommand}"></MenuItem>
					<MenuItem
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemRunSelectedTaskOnce' }"
						Command="{Binding WriteSelectedTaskToChipOnceCommand}"></MenuItem>
					<Separator />
					<MenuItem
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemRunSelectedTaskAutomatically' }"
						Command="{Binding WriteSelectedTaskToChipAutoCommand}"
						IsChecked="{Binding IsWriteSelectedToChipAutoChecked, Mode=OneWay}"></MenuItem>
					<MenuItem
						IsCheckable="True"
						IsChecked="{Binding IsWriteToAllChipAutoChecked, Mode=OneWay}"
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemRunAllTasksAutomatically' }"
						Command="{Binding WriteToAllChipAutoCommand}"></MenuItem>
					<Separator />
					<MenuItem
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemSetTaskStatusToUndone' }"
						Command="{Binding ResetTaskStatusCommand}"></MenuItem>
					<MenuItem
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemRemoveAllTasks' }"
						Command="{Binding RemoveAllTasksCommand}"></MenuItem>
				</MenuItem>
				<!-- Programming -->
				<MenuItem
					VerticalContentAlignment="Center"
					VerticalAlignment="Top"
					RenderTransformOrigin="0.5,0.5"
					Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemOptionsHeader' }">
					<MenuItem
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemReaderSettingsHeader' }"
						Command="{Binding NewReaderSetupDialogCommand}"></MenuItem>
                    <MenuItem
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemCreateReportHeader' }"
						Command="{Binding NewCreateReportCommand}"></MenuItem>
                    <MenuItem
						Header="_Language">
						<RadioButton
							x:Name="radioButtonGerman"
							Content="german"
							IsChecked="{Binding RadioButtonGermanLanguageSelectedState, Mode=TwoWay}"
							Command="{Binding SwitchLanguageToGerman}" />
						<RadioButton
							x:Name="radioButtonEnglish"
							Content="english"
							IsChecked="{Binding RadioButtonEnglishLanguageSelectedState, Mode=TwoWay}"
							Command="{Binding SwitchLanguageToEnglish}" />
					</MenuItem>
				</MenuItem>
				<!-- Options -->
				<MenuItem
					Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemHelpHeader' }"
					VerticalContentAlignment="Center"
					VerticalAlignment="Top">
					<MenuItem
						IsCheckable="True"
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemCheckForUpdates' }"
						IsChecked="{Binding IsCheckForUpdatesChecked, Mode=TwoWay}"></MenuItem>
					<MenuItem
						Header="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='menuItemHelpHeader' }"></MenuItem>
				</MenuItem>
				<!-- Help -->
			</Menu>
		</DockPanel>
		<DockPanel>
			<StatusBar
				DockPanel.Dock="Bottom"
				VerticalAlignment="Bottom">
				<StatusBarItem>
					<Label
						Content="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='labelSelectedReader' }" />
				</StatusBarItem>
				<StatusBarItem>
					<TextBlock
						Text="{Binding CurrentReader}" />
				</StatusBarItem>
				<StatusBarItem>
					<Label
						Content="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='labelReaderStatus' }" />
				</StatusBarItem>
				<StatusBarItem>
					<TextBlock
						Text="{Binding ReaderStatus}" />
				</StatusBarItem>
				<!--				<StatusBarItem>
					<ProgressBar
						Minimum="0"
						Maximum="100"
						Value="{Binding ProgressBarValue}"
						Visibility="Visible"
						Foreground="#FF1CE006"
						Height="26"
						Width="150"
						HorizontalAlignment="Right" />
				</StatusBarItem>-->
			</StatusBar>
		</DockPanel>
	</Grid>
</Window>