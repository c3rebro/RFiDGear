<?xml version="1.0" encoding="utf-8" ?>
<Window
    x:Class="RFiDGear.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dal="clr-namespace:RFiDGear.DataAccessLayer"
    xmlns:dlgs="clr-namespace:MvvmDialogs.Behaviors;assembly=MVVMDialogs"
    xmlns:local="clr-namespace:RFiDGear"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="clr-namespace:RFiDGear.ViewModel"
    x:Name="homeWindow"
    Title="RFiDGear"
    Width="900"
    Height="500"
    MinWidth="900"
    MinHeight="500"
    ResizeMode="CanResizeWithGrip"
    HorizontalContentAlignment="Left"
    dlgs:DialogBehavior.DialogViewModels="{Binding Dialogs}"
    DataContext="{Binding Source={StaticResource Locator}, Path=MainWin}"
    FontFamily="Segoe UI"
    FontWeight="Normal"
    MouseLeftButtonDown="WindowMouseLeftButtonDown"
    SizeToContent="Manual"
    WindowStartupLocation="CenterScreen" 
    mc:Ignorable="d">
    <Window.InputBindings>
        <KeyBinding Key="Escape" Command="{Binding CloseApplication}" />
        <KeyBinding Key="F1" Command="{Binding ShowHelpCommand}" />
        <KeyBinding
            Key="R"
            Command="{Binding ReadChipCommand}"
            Modifiers="Control" />
        <KeyBinding
            Key="O"
            Command="{Binding NewOpenFileDialogCommand}"
            Modifiers="Control" />
        <KeyBinding
            Key="S"
            Command="{Binding SaveTaskAsDialogCommand}"
            Modifiers="Control" />
        <KeyBinding
            Key="X"
            Command="{Binding WriteToChipOnceCommand}"
            Modifiers="Control" />
        <KeyBinding
            Key="Q"
            Command="{Binding ExecuteQuickCheckCommand}"
            Modifiers="Control" />
    </Window.InputBindings>
    <!--
        WindowStyle="None"
        ResizeMode="CanResizeWithGrip"
        AllowsTransparency="True"
        BorderThickness="1"
        BorderBrush="Black"
        Opacity="0.98"
    -->
    <Window.Resources>
        <dal:BindingProxy x:Key="proxy" Data="{Binding}" />
        <dal:ResourceLoader x:Key="Localization" />
        <ContextMenu x:Key="EmptySpaceMenu" ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Path=DataContext.EmptySpaceContextMenu}">
            <ContextMenu.ItemContainerStyle>
                <Style TargetType="MenuItem">
                    <Setter Property="HorizontalContentAlignment" Value="Left" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding}" Value="{x:Null}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Separator Style="{StaticResource {x:Static MenuItem.SeparatorStyleKey}}" />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ContextMenu.ItemContainerStyle>
        </ContextMenu>
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="400"/>
            <ColumnDefinition MinWidth="400" Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid
            Grid.Row="0"
            Grid.Column="0"
            Margin="8,8,8,45" Grid.ColumnSpan="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto" MinWidth="200" />
                <ColumnDefinition Width="5" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="8"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="auto"/>
            </Grid.RowDefinitions>
            <TreeView
                x:Name="treeViewOnline"
                Grid.Row="1"
                Grid.Column="0"
                Margin="0,8,8,10"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                BorderBrush="LightGray"
                BorderThickness="1,1,1,1"
                ScrollViewer.VerticalScrollBarVisibility="Auto"
                ScrollViewer.CanContentScroll="True"
                ItemsSource="{Binding TreeViewParentNodes}"
                MouseLeftButtonDown="MainWindowTreeViewControlMouseButtonDown"
                MouseRightButtonDown="MainWindowTreeViewControlMouseButtonDown">
                <TreeView.ItemContainerStyle>
                    <!--  This Style binds a TreeViewItem to a TreeViewModelBase.  -->
                    <Style TargetType="{x:Type TreeViewItem}">
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />
                        <Setter Property="IsSelected" Value="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />
                        <Setter Property="FontWeight" Value="Normal" />
                        <!--<Setter Property="ContextMenu" Value="{StaticResource RowMenu}" />-->
                        <!--<Setter
							Property="IsSelected"
							Value="{Binding DataContext.IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />-->
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="FontWeight" Value="Bold" />
                                <Setter Property="Background" Value="White" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </TreeView.ItemContainerStyle>
                <TreeView.Resources>
                    <Style TargetType="TreeView">
                        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                    </Style>
                    <ContextMenu x:Key="TreeViewEmptySpaceMenu" ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Path=DataContext.RowContextMenu}">
                        <ContextMenu.ItemContainerStyle>
                            <Style TargetType="MenuItem">
                                <Setter Property="HorizontalContentAlignment" Value="Left" />
                                <Setter Property="VerticalContentAlignment" Value="Center" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Separator Style="{StaticResource {x:Static MenuItem.SeparatorStyleKey}}" />
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ContextMenu.ItemContainerStyle>
                    </ContextMenu>
                    <HierarchicalDataTemplate DataType="{x:Type vm:RFiDChipParentLayerViewModel}" ItemsSource="{Binding Children}">
                        <!-- <Image Width="16" Height="16" Margin="3,0" Source="Images\Region.png" /> -->
                        <HierarchicalDataTemplate.Resources>
                            <Style TargetType="TextBlock">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsBeingProgrammed}" Value="True">
                                        <Setter Property="Background" Value="Yellow" />
                                        <Setter Property="FontWeight" Value="Normal" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsBeingProgrammed}" Value="False">
                                        <Setter Property="Background" Value="Red" />
                                        <Setter Property="FontWeight" Value="Normal" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsProgrammingCompletedSuccessfully}" Value="True">
                                        <Setter Property="Background" Value="Green" />
                                        <Setter Property="FontWeight" Value="Normal" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsProgrammingCompletedSuccessfully}" Value="False">
                                        <Setter Property="Background" Value="Red" />
                                        <Setter Property="FontWeight" Value="Normal" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </HierarchicalDataTemplate.Resources>
                        <TextBlock Text="{Binding ParentNodeHeader}" Margin="0,0,8,0">
                            <Run Text="{Binding ParentNodeHeaderRed}" Foreground="Red"/>
                            <TextBlock.ContextMenu>
                                <ContextMenu ItemsSource="{Binding ContextMenu}" />
                            </TextBlock.ContextMenu>
                        </TextBlock>
                    </HierarchicalDataTemplate>
                    <HierarchicalDataTemplate DataType="{x:Type vm:RFiDChipChildLayerViewModel}" ItemsSource="{Binding Children}">
                        <HierarchicalDataTemplate.Resources>
                            <Style TargetType="TextBlock">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsAuthenticated}" Value="True">
                                        <Setter Property="Foreground" Value="Green" />
                                        <Setter Property="FontWeight" Value="Bold" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsAuthenticated}" Value="False">
                                        <Setter Property="Foreground" Value="Red" />
                                        <Setter Property="FontWeight" Value="Normal" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding HasChanged}" Value="True">
                                        <Setter Property="Foreground" Value="DarkViolet" />
                                        <Setter Property="FontWeight" Value="Bold" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding HasChanged}" Value="False">
                                        <Setter Property="Foreground" Value="Green" />
                                        <Setter Property="FontWeight" Value="Bold" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </HierarchicalDataTemplate.Resources>
                        <!-- <Image Width="16" Height="16" Margin="3,0" Source="Images\State.png" /> -->
                        <TextBlock Text="{Binding ChildNodeHeader}" Margin="0,0,8,0">
                            <TextBlock.ContextMenu>
                                <ContextMenu ItemsSource="{Binding ContextMenu}" />
                            </TextBlock.ContextMenu>
                        </TextBlock>
                    </HierarchicalDataTemplate>
                    <HierarchicalDataTemplate DataType="{x:Type vm:RFiDChipGrandChildLayerViewModel}" ItemsSource="{Binding Children}">
                        <!-- <Image Width="16" Height="16" Margin="3,0" Source="Images\City.png" /> -->
                        <TextBlock Text="{Binding GrandChildNodeHeader}" Margin="0,0,8,0">
                            <TextBlock.Resources>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsAuthenticated}" Value="True">
                                            <Setter Property="Foreground" Value="Green" />
                                            <Setter Property="FontWeight" Value="Bold" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsAuthenticated}" Value="False">
                                            <Setter Property="Foreground" Value="Red" />
                                            <Setter Property="FontWeight" Value="Normal" />
                                        </DataTrigger>
                                        <!--
										<DataTrigger
											Binding="{Binding IsVisible}"
											Value="True">
											<Setter
												Property="Visibility"
												Value="Visible" />
										</DataTrigger>
										<DataTrigger
											Binding="{Binding IsVisible}"
											Value="False">
											<Setter
												Property="Visibility"
												Value="Hidden" />
										</DataTrigger>
									-->
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Resources>
                        </TextBlock>
                    </HierarchicalDataTemplate>
                    <DataTemplate DataType="{x:Type vm:RFiDChipGrandGrandChildLayerViewModel}">
                        <!-- <Image Width="16" Height="16" Margin="3,0" Source="Images\City.png" /> -->
                        <TextBlock Text="{Binding GrandGrandChildNodeHeader}" Margin="0,0,8,0">
                            <TextBlock.Resources>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsAuthenticated}" Value="True">
                                            <Setter Property="Foreground" Value="Green" />
                                            <Setter Property="FontWeight" Value="Bold" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsAuthenticated}" Value="False">
                                            <Setter Property="Foreground" Value="Red" />
                                            <Setter Property="FontWeight" Value="Normal" />
                                        </DataTrigger>
                                        <!--
										<DataTrigger
											Binding="{Binding IsVisible}"
											Value="True">
											<Setter
												Property="Visibility"
												Value="Visible" />
										</DataTrigger>
										<DataTrigger
											Binding="{Binding IsVisible}"
											Value="False">
											<Setter
												Property="Visibility"
												Value="Hidden" />
										</DataTrigger>
									-->
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Resources>
                        </TextBlock>
                    </DataTemplate>
                </TreeView.Resources>
                <TreeView.ContextMenu>
                    <ContextMenu
                        HorizontalContentAlignment="Center"
                        VerticalContentAlignment="Center"
                        ItemsSource="{Binding EmptySpaceTreeViewContextMenu}" />
                </TreeView.ContextMenu>
            </TreeView>
            <GridSplitter
                Grid.Row="1"
                Grid.Column="1"
                Width="5"
                Margin="0,8,0,8"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Background="#FFD9D9DB"
                ResizeBehavior="PreviousAndNext"
                ResizeDirection="Auto" />
            <DataGrid
                x:Name="myDataGrid"
                Grid.Row="1"
                Grid.Column="2"
                Margin="8,8,0,10"
                BorderBrush="LightGray"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                HorizontalContentAlignment="Left"
                VerticalContentAlignment="Center"
                local:SelectingItemAttachedProperty.SelectingItem="{Binding SelectedSetupViewModel, Mode=TwoWay}"
                AlternatingRowBackground="LightGray"
                AutoGenerateColumns="False"
                Background="Transparent"
                CanUserAddRows="False"
                CanUserReorderColumns="True"
                CanUserSortColumns="True"
                ItemsSource="{Binding ChipTasks.TaskCollection}"
                SelectedIndex="{Binding DataGridPosition}"
                SelectedItem="{Binding Path=DataContext.SelectedSetupViewModel, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                SelectionMode="Single"
                VirtualizingPanel.IsVirtualizing="True">
                <DataGrid.ContextMenu>
                    <ContextMenu ItemsSource="{Binding EmptySpaceContextMenu}" />
                </DataGrid.ContextMenu>
                <DataGrid.InputBindings>
                    <MouseBinding Command="{Binding GetAddEditCommand}" Gesture="LeftDoubleClick" />
                </DataGrid.InputBindings>
                <DataGrid.Resources>
                    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="DodgerBlue" />
                    <ContextMenu x:Key="RowMenu" ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Path=DataContext.RowContextMenu}">
                        <ContextMenu.ItemContainerStyle>
                            <Style TargetType="MenuItem">
                                <Setter Property="HorizontalContentAlignment" Value="Left" />
                                <Setter Property="VerticalContentAlignment" Value="Center" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Separator Style="{StaticResource {x:Static MenuItem.SeparatorStyleKey}}" />
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ContextMenu.ItemContainerStyle>
                    </ContextMenu>
                </DataGrid.Resources>
                <DataGrid.RowStyle>
                    <Style TargetType="{x:Type DataGridRow}">
                        <Setter Property="ContextMenu" Value="{StaticResource RowMenu}" />
                        <Setter Property="HorizontalContentAlignment" Value="Left"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                    </Style>
                </DataGrid.RowStyle>
                <DataGrid.RowHeaderTemplate>
                    <DataTemplate>
                        <Image
                            x:Name="editImage"
                            Width="auto"
                            Height="20"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center" />
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=DataGridRow}, Path=DataContext.IsTaskCompletedSuccessfully}" Value="True">
                                <Setter TargetName="editImage" Property="Source" Value="/RFiDGear;component/Resources/confirm.ico" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=DataGridRow}, Path=DataContext.IsTaskCompletedSuccessfully}" Value="False">
                                <Setter TargetName="editImage" Property="Source" Value="/RFiDGear;component/Resources/error.ico" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=DataGridRow}, Path=DataContext.IsTaskCompletedSuccessfully}" Value="{x:Null}">
                                <Setter TargetName="editImage" Property="Source" Value="/RFiDGear;component/Resources/wait.ico" />
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </DataGrid.RowHeaderTemplate>
                <DataGrid.RowHeaderStyle>
                    <Style TargetType="{x:Type DataGridRowHeader}">
                        <Setter Property="Width" Value="auto" />
                    </Style>
                </DataGrid.RowHeaderStyle>
                <DataGrid.Columns>
                    <!-- <DataGridTextColumn
					Header="{Binding Data.LocalizationResourceSet,
					Converter={StaticResource Localization},
					ConverterParameter='dataGridHeaderUnlockEventConfigDialogTriggerType',
					Source={StaticResource proxy}}"
					IsReadOnly="True"
					Binding="{Binding Path=DoorMonitoringTrigger, Converter={StaticResource Localization}, ConverterParameter={x:Type local:DoorMonEventType}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />-->
                    <DataGridTextColumn
                        Binding="{Binding Path=CurrentTaskIndex}"
                        Header="{Binding Data.LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='dataGridHeaderMainWindowTaskIndex', Source={StaticResource proxy}}"
                        IsReadOnly="True">
                        <DataGridTextColumn.HeaderStyle>
                            <Style TargetType="{x:Type DataGridColumnHeader}">
                                <Setter Property="HorizontalContentAlignment" Value="Center" />
                                <Setter Property="VerticalContentAlignment" Value="Center" />
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="HorizontalAlignment" Value="Center" />
                                <Setter Property="VerticalAlignment" Value="Center" />
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn
                        Binding="{Binding Path=SelectedTaskType, Converter={StaticResource Localization}}"
                        Header="{Binding Data.LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='dataGridHeaderMainWindowTaskType', Source={StaticResource proxy}}"
                        IsReadOnly="True">
                        <DataGridTextColumn.HeaderStyle>
                            <Style TargetType="{x:Type DataGridColumnHeader}">
                                <Setter Property="HorizontalContentAlignment" Value="Left" />
                                <Setter Property="VerticalContentAlignment" Value="Center" />
                            </Style>
                        </DataGridTextColumn.HeaderStyle>
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="Margin" Value="5,0,5,0" />
                                <Setter Property="HorizontalAlignment" Value="Left" />
                                <Setter Property="VerticalAlignment" Value="Center" />
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                    <DataGridTemplateColumn Width="auto" Header="{Binding Data.LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='dataGridHeaderMainWindowTaskDescription', Source={StaticResource proxy}}">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <TextBox Text="{Binding Path=SelectedTaskDescription}" TextWrapping="Wrap" Margin="3,0,0,3">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}">
                                            <Setter Property="HorizontalAlignment" Value="Left" />
                                            <Setter Property="BorderBrush" Value="Transparent" />
                                            <Setter Property="MaxWidth" Value="1000" />
                                            <Setter Property="Background" Value="Transparent" />
                                            <Setter Property="VerticalAlignment" Value="Center" />
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                        <DataGridTemplateColumn.HeaderStyle>
                            <Style TargetType="{x:Type DataGridColumnHeader}">
                                <Setter Property="HorizontalContentAlignment" Value="Left" />
                                <Setter Property="VerticalContentAlignment" Value="Center" />
                            </Style>
                        </DataGridTemplateColumn.HeaderStyle>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>
        </Grid>
        <DockPanel Grid.ColumnSpan="2" Grid.Row="0">
            <Menu
                HorizontalContentAlignment="Right"
                VerticalAlignment="Top"
                Margin="2,2,0,0"
                Background="{x:Null}"
                DockPanel.Dock="Top">
                <MenuItem
                    VerticalAlignment="Top"
                    VerticalContentAlignment="Center"
                    Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemFileHeader'}">
                    <MenuItem
                        Command="{Binding NewOpenFileDialogCommand}"
                        Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemOpenProject'}"
                        InputGestureText="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemShortcutOpenProject'}" />
                    <MenuItem
                        Command="{Binding SaveTaskDialogCommand}"
                        Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemSaveTask'}"/>
                    <MenuItem
                        Command="{Binding SaveTaskAsDialogCommand}"
                        Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemSaveTaskAs'}"
                        InputGestureText="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemShortcutSaveTaskAs'}" />
                    <MenuItem Command="{Binding SaveChipDialogCommand}" Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemSaveChip'}" />
                    <Separator />
                    <MenuItem Command="{Binding CloseApplication}" Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemExitHeader'}" />
                </MenuItem>
                <!--  File  -->
                <MenuItem
                    VerticalAlignment="Top"
                    VerticalContentAlignment="Center"
                    Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemEditHeader'}">
                    <MenuItem Command="{Binding CreateGenericTaskCommand}" Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemCreateGenericTaskHeader'}" />
                    <MenuItem Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemCreateTaskHeader'}">
                        <MenuItem Command="{Binding CreateGenericChipTaskCommand}" Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemCreateGenericChipTaskHeader'}" />
                        <MenuItem Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemMifareHeader'}">
                            <MenuItem Command="{Binding CreateClassicTaskCommand}" Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemAddEditMifareClassicTaskHeader'}" />
                            <MenuItem Command="{Binding CreateDesfireTaskCommand}" Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemAddEditMifareDesfireTaskHeader'}" />
                            <MenuItem Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemAddEditMifarePlusTaskHeader'}" IsEnabled="False" />
                            <MenuItem Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemAddEditMifareSAMTaskHeader'}" IsEnabled="False" />
                            <MenuItem Command="{Binding CreateUltralightTaskCommand}" Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemAddEditMifareUltralightTaskHeader'}" />
                        </MenuItem>
                        <MenuItem Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemTagItHeader'}" IsEnabled="False">
                            <MenuItem Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemAddEditTagitHFIPlusTaskHeader'}" IsEnabled="False" />
                        </MenuItem>
                    </MenuItem>
                    <Separator />
                    <MenuItem Command="{Binding RemoveChipsFromTreeCommand}" Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemRemoveCardsHeader'}" />
                    <MenuItem Command="{Binding RemoveAllTasksCommand}" Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemRemoveAllTasks'}" />
                    <Separator />
                    <MenuItem Command="{Binding ResetTaskStatusCommand}" Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemSetTaskStatusToUndone'}" />
                    <MenuItem Command="{Binding ResetReportTaskDirectoryCommand}" Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemResetTasksReportTargetPath'}" />

                </MenuItem>
                <!--  Edit  -->
                <MenuItem
                    VerticalAlignment="Top"
                    VerticalContentAlignment="Center"
                    Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemProgrammingHeader'}"
                    RenderTransformOrigin="0.5,0.5">
                    <MenuItem
                        Command="{Binding ReadChipCommand}"
                        Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemReadChipPublic'}"
                        InputGestureText="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemShortcutReadChipPublic'}" />
                    <MenuItem
                        Command="{Binding ExecuteQuickCheckCommand}"
                        Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemExecuteQuickCheck'}"
                        InputGestureText="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemShortcutExecuteQuickCheck'}" />
                    <Separator />
                    <MenuItem
                        Command="{Binding WriteToChipOnceCommand}"
                        Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemRunAllTasksOnce'}"
                        InputGestureText="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemShortcutWriteToChipOnce'}" />
                    <MenuItem
                        Command="{Binding WriteToAllChipAutoCommand}"
                        Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemRunAllTasksAutomatically'}"
                        IsCheckable="True"
                        IsChecked="{Binding IsWriteToAllChipAutoChecked, Mode=OneWay}" />
                    <Separator />
                    <MenuItem 
                        Command="{Binding WriteSelectedTaskToChipOnceCommand}" 
                        Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemRunSelectedTaskOnce'}" />
                    <MenuItem
                        Command="{Binding WriteSelectedTaskToChipAutoCommand}"
                        Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemRunSelectedTaskAutomatically'}"
                        IsChecked="{Binding IsWriteSelectedToChipAutoChecked, Mode=OneWay}" />

                </MenuItem>
                <!--  Programming  -->
                <MenuItem
                    VerticalAlignment="Top"
                    VerticalContentAlignment="Center"
                    Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemOptionsHeader'}"
                    RenderTransformOrigin="0.5,0.5">
                    <MenuItem Command="{Binding NewReaderSetupDialogCommand}" Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemReaderSettingsHeader'}" />
                    <MenuItem Header="_Language">
                        <RadioButton
                            x:Name="radioButtonGerman"
                            Command="{Binding SwitchLanguageToGerman}"
                            Content="german"
                            IsChecked="{Binding RadioButtonGermanLanguageSelectedState, Mode=TwoWay}" />
                        <RadioButton
                            x:Name="radioButtonEnglish"
                            Command="{Binding SwitchLanguageToEnglish}"
                            Content="english"
                            IsChecked="{Binding RadioButtonEnglishLanguageSelectedState, Mode=TwoWay}" />
                    </MenuItem>
                </MenuItem>
                <!--  Options  -->
                <MenuItem
                    VerticalAlignment="Top"
                    VerticalContentAlignment="Center"
                    Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemHelpHeader'}">
                    <MenuItem Command="{Binding ShowHelpCommand}" Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemHelpHeader'}" />
                    <MenuItem Command="{Binding CheckUpdateCommand}" Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemCheckUpdatesHeader'}" />
                    <MenuItem Command="{Binding NewAboutDialogCommand}" Header="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='menuItemAboutHeader'}" />
                </MenuItem>
                <!--  Help  -->
            </Menu>
        </DockPanel>
        <DockPanel Grid.ColumnSpan="2" Grid.Row="2">
            <StatusBar VerticalAlignment="Bottom" DockPanel.Dock="Bottom" Height="49" VerticalContentAlignment="Center" >
                <StatusBarItem Margin="4,0,0,0" Height="auto" VerticalAlignment="Center" Content="{Binding LocalizationResourceSet, Converter={StaticResource Localization}, ConverterParameter='labelSelectedReader'}" />
                <StatusBarItem>
                    <TextBlock Text="{Binding CurrentReader}" FontWeight="Bold"/>
                </StatusBarItem>
                <StatusBarItem>
                    <TextBlock Text="{Binding LocalizationResourceSet, 
                        Converter={StaticResource Localization}, 
                        ConverterParameter='labelReaderStatus'}"
                           Height="auto"/>
                </StatusBarItem>
                <StatusBarItem>
                    <TextBlock Text="{Binding ReaderStatus}" Height="auto" FontWeight="Bold" HorizontalAlignment="Left"/>
                </StatusBarItem>
                <StatusBarItem HorizontalAlignment="Right" Margin="0,0,12,0">
                    <TextBlock Text="{Binding DateTimeStatusBar, UpdateSourceTrigger=PropertyChanged}" Height="auto" FontWeight="Bold" HorizontalAlignment="Left"/>
                </StatusBarItem>
                <!--				
                <StatusBarItem>
					<ProgressBar
						Minimum="0"
						Maximum="100"
						Value="{Binding ProgressBarValue}"
						Visibility="Visible"
						Foreground="#FF1CE006"
						Height="26"
						Width="150"
						HorizontalAlignment="Right" />
				</StatusBarItem>-->
            </StatusBar>
        </DockPanel>
    </Grid>
</Window>