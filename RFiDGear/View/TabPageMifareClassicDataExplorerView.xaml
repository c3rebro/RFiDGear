<?xml version="1.0" encoding="utf-8"?>
<UserControl
	x:Class="RFiDGear.View.TabPageMifareClassicDataExplorerView" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:RFiDGear" xmlns:dal="clr-namespace:RFiDGear.DataAccessLayer"
	mc:Ignorable="d" xmlns:vm="clr-namespace:RFiDGear.ViewModel" xmlns:_3rdP="clr-namespace:RFiDGear._3rdParty" xmlns:Controls0="clr-namespace:RFiDGear.View" xmlns:Controls1="clr-namespace:LibLogicalAccess;assembly=Interop.LibLogicalAccess">
	<UserControl.Resources>
		<BooleanToVisibilityConverter
			x:Key="BoolToVisConv" />
		<dal:BindingProxy
			x:Key="proxy"
			Data="{Binding}" />
		<dal:ResourceLoader
			x:Key="Localization" />
		<!--<ContextMenu  x:Key="RowMenu" ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Path=DataContext.RowContextMenu}">
			<ContextMenu.ItemContainerStyle>
				<Style TargetType="MenuItem">
					<Setter
						Property="HorizontalContentAlignment"
						Value="Left" />
					<Setter
						Property="VerticalContentAlignment"
						Value="Center" />
				</Style>
			</ContextMenu.ItemContainerStyle>
		</ContextMenu>-->
	</UserControl.Resources>
	<Grid>
		<Grid
			Margin="0,0,0,0"
			VerticalAlignment="Stretch"
			HorizontalAlignment="Stretch"
			Grid.Row="0"
			Grid.Column="0">
			<Grid.ColumnDefinitions>
				<ColumnDefinition
					Width="0.45*" />
				<ColumnDefinition
					Width="5" />
				<ColumnDefinition
					Width="0.55*" />
			</Grid.ColumnDefinitions>
			<GridSplitter
				ResizeBehavior="PreviousAndNext"
				ResizeDirection="Auto"
				Background="#FFD9D9DB"
				Margin="0,0,0,0"
				VerticalAlignment="Stretch"
				HorizontalAlignment="Stretch"
				Grid.Row="0"
				Grid.Column="1"
				Width="5"
				Grid.RowSpan="2" />
			<GroupBox
				IsEnabled="{Binding IsDataExplorerEditTabEnabled}"
				Header="Data on Chip"
				Grid.Column="0"
				Grid.Row="0"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Stretch"
				Margin="8,0,8,0">
				<Grid
					VerticalAlignment="Stretch"
					Margin="0,0,0,0"
					HorizontalAlignment="Stretch">
					<DataGrid
						ItemsSource="{Binding ChildNodeViewModelFromChip.Children, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}"
						AutoGenerateColumns="False"
						CanUserReorderColumns="False"
						CanUserSortColumns="False"
						CanUserAddRows="False"
						Background="Transparent"
						AlternatingRowBackground="LightGray">
						<!--SelectedItem="{Binding SelectedDataGridItem, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"-->
						<DataGrid.RowStyle>
							<Style
								TargetType="{x:Type DataGridRow}">
								<!--<Setter Property="ContextMenu" Value="{StaticResource RowMenu}" />-->
								<!--<Setter Property="ToolTip" Value="{StaticResource DescriptionToolTip}" />-->
								<!--<Setter Property="IsSelected" Value="{Binding DataContext.IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />-->
								<Setter
									Property="Header"
									Value="{Binding GrandChildNodeHeader}" />
								<Setter
									Property="HorizontalContentAlignment"
									Value="Center" />
								<Setter
									Property="VerticalContentAlignment"
									Value="Center" />
								<Style.Triggers>
									<DataTrigger
										Binding="{Binding IsValidDataContent}"
										Value="True">
										<Setter
											Property="Foreground"
											Value="Green" />
										<Setter
											Property="FontWeight"
											Value="Bold" />
									</DataTrigger>
									<DataTrigger
										Binding="{Binding IsValidDataContent}"
										Value="False">
										<Setter
											Property="Foreground"
											Value="Red" />
										<Setter
											Property="FontWeight"
											Value="Normal" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</DataGrid.RowStyle>
						<!--	{Binding Data.LocalizationResourceSet,
								Converter={StaticResource Localization},
								ConverterParameter='dataGridHeaderMainWindowEventName',
								Source={StaticResource proxy}}-->
						<DataGrid.Columns>
							<DataGridTextColumn
								Header="Hex"
								Binding="{Binding DataAsHexString, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
								FontFamily="Lucida Console"
								IsReadOnly="True">
								<DataGridTextColumn.ElementStyle>
									<Style
										TargetType="{x:Type TextBlock}">
										<Setter
											Property="VerticalAlignment"
											Value="Center" />
										<Setter
											Property="HorizontalAlignment"
											Value="Center" />
									</Style>
								</DataGridTextColumn.ElementStyle>
							</DataGridTextColumn>
							<DataGridTextColumn
								Header="String"
								Binding="{Binding DataAsCharString, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
								FontFamily="Lucida Console"
								IsReadOnly="True">
								<DataGridTextColumn.ElementStyle>
									<Style
										TargetType="{x:Type TextBlock}">
										<Setter
											Property="VerticalAlignment"
											Value="Center" />
										<Setter
											Property="HorizontalAlignment"
											Value="Center" />
										<!--<EventSetter Event="KeyDown" Handler="{Binding StaticResource proxy}" />-->
									</Style>
								</DataGridTextColumn.ElementStyle>
							</DataGridTextColumn>
						</DataGrid.Columns>
					</DataGrid>
				</Grid>
			</GroupBox>
			<GroupBox
				IsEnabled="{Binding IsDataExplorerEditTabEnabled}"
				Header="Data in Memory/File"
				Grid.Column="0"
				Grid.Row="1"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Stretch"
				Margin="8,0,8,8">
				<Grid
					VerticalAlignment="Stretch"
					Margin="0,0,0,0"
					HorizontalAlignment="Stretch">
					<DataGrid
						ItemsSource="{Binding ChildNodeViewModelTemp.Children}"
						AutoGenerateColumns="False"
						CanUserReorderColumns="False"
						CanUserSortColumns="False"
						CanUserAddRows="False"
						Background="Transparent"
						AlternatingRowBackground="LightGray">
						<!--SelectedItem="{Binding SelectedDataGridItem, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"-->
						<DataGrid.RowStyle>
							<Style
								TargetType="{x:Type DataGridRow}">
								<!--<Setter Property="ContextMenu" Value="{StaticResource RowMenu}" />-->
								<!--<Setter Property="ToolTip" Value="{StaticResource DescriptionToolTip}" />-->
								<!--<Setter Property="IsSelected" Value="{Binding DataContext.IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" />-->
								<Setter
									Property="Header"
									Value="{Binding GrandChildNodeHeader}" />
								<Setter
									Property="HorizontalContentAlignment"
									Value="Center" />
								<Setter
									Property="VerticalContentAlignment"
									Value="Center" />
								<Style.Triggers>
									<DataTrigger
										Binding="{Binding IsValidDataContent}"
										Value="True">
										<Setter
											Property="Foreground"
											Value="Green" />
										<Setter
											Property="FontWeight"
											Value="Bold" />
									</DataTrigger>
									<DataTrigger
										Binding="{Binding IsValidDataContent}"
										Value="False">
										<Setter
											Property="Foreground"
											Value="Red" />
										<Setter
											Property="FontWeight"
											Value="Normal" />
									</DataTrigger>
									<DataTrigger
										Binding="{Binding IsValidDataContent}"
										Value="{x:Null}">
										<Setter
											Property="Foreground"
											Value="Black" />
										<Setter
											Property="FontWeight"
											Value="Normal" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</DataGrid.RowStyle>
						<DataGrid.Columns>
							<DataGridTemplateColumn
								Header="Hex">
								<DataGridTemplateColumn.CellTemplate>
									<DataTemplate>
										<_3rdP:SelectionBindingTextBox
											Text="{Binding DataAsHexString, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
											VerticalContentAlignment="Center"
											HorizontalContentAlignment="Center"
											BindableSelectionStart="{Binding SelectedDataIndexStart, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
											BindableSelectionLength="{Binding SelectedDataLength, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
											FontFamily="Lucida Console"
											BorderThickness="0"
											IsFocused="{Binding IsFocused}">
											<_3rdP:SelectionBindingTextBox.Style>
												<Style
													TargetType="{x:Type TextBox}">
													<Style.Triggers>
														<DataTrigger
															Binding="{Binding IsValidSelectedDataIndexAndLength}"
															Value="True">
															<Setter
																Property="Foreground"
																Value="Black" />
														</DataTrigger>
														<DataTrigger
															Binding="{Binding IsValidSelectedDataIndexAndLength}"
															Value="False">
															<Setter
																Property="Foreground"
																Value="Red" />
														</DataTrigger>
													</Style.Triggers>
												</Style>
											</_3rdP:SelectionBindingTextBox.Style>
										</_3rdP:SelectionBindingTextBox>
									</DataTemplate>
								</DataGridTemplateColumn.CellTemplate>
							</DataGridTemplateColumn>
							<DataGridTextColumn
								Header="String"
								Binding="{Binding DataAsCharString, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
								FontFamily="Lucida Console">
								<DataGridTextColumn.ElementStyle>
									<Style
										TargetType="{x:Type TextBlock}">
										<Setter
											Property="VerticalAlignment"
											Value="Center" />
										<Setter
											Property="FontFamily"
											Value="Lucida Console" />
										<Setter
											Property="HorizontalAlignment"
											Value="Center" />
										<!--<EventSetter Event="KeyDown" Handler="{Binding StaticResource proxy}" />-->
									</Style>
								</DataGridTextColumn.ElementStyle>
							</DataGridTextColumn>
						</DataGrid.Columns>
					</DataGrid>
				</Grid>
			</GroupBox>
			<GroupBox
				Header="Read | Write Data"
				IsEnabled="{Binding IsDataExplorerEditTabEnabled}"
				Margin="7,8,8,8"
				VerticalAlignment="Stretch"
				HorizontalAlignment="Stretch"
				Grid.Row="0"
				Grid.Column="2"
				Grid.RowSpan="2">
				<Grid
					VerticalAlignment="Stretch"
					Margin="0,0,0,0"
					HorizontalAlignment="Stretch">
					<Button
						Command="{Binding WriteDataCommand}"
						Content="Write"
						Height="23"
						Grid.Column="0"
						Grid.ColumnSpan="2"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Bottom"
						Margin="7.5,0,7.5,7"
						Grid.Row="2" />
					<Button
						Command="{Binding ReadDataCommand}"
						Content="Read"
						Height="23"
						Grid.Column="0"
						Grid.ColumnSpan="2"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Bottom"
						Margin="7.5,0,7.5,7"
						Grid.Row="3" />
					<GroupBox
						Grid.Column="0"
						Grid.ColumnSpan="2"
						Grid.Row="0"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Stretch"
						Margin="8,8,7,7"
						IsEnabled="{Binding UseMADInvert}"
						Header="Direct Access">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition
									Width="185" />
								<ColumnDefinition
									Width="0.287459850407673*" />
							</Grid.ColumnDefinitions>
							<Label
								Content="Data Block to Read/Write"
								Height="26"
								Grid.Column="0"
								Grid.Row="0"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Top"
								Margin="14,8,7,0" />
							<ComboBox
								ItemsSource="{dal:Enumerate {x:Type dal:DataExplorer_DataBlock}}"
								SelectedItem="{Binding SelectedDataBlockToReadWrite,Converter={StaticResource Localization},ConverterParameter={x:Type dal:DataExplorer_DataBlock},UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"
								FocusManager.IsFocusScope="True"
								Grid.Column="1"
								Grid.Row="0"
								HorizontalAlignment="Stretch"
								Height="23"
								VerticalAlignment="Top"
								Margin="9,8,7,0" />
						</Grid>
					</GroupBox>
					<GroupBox
						Header="MAD Access"
						Visibility="{Binding UseMAD, Converter={StaticResource BoolToVisConv}, FallbackValue=Visible}"
						Grid.Column="0"
						Grid.ColumnSpan="2"
						Grid.Row="1"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Stretch"
						Margin="8,1,7,7">
						<Grid>
							<Label
								Content="Application ID"
								Grid.Column="0"
								Grid.Row="0"
								Height="26"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Margin="8,9,7,7" />
							<Label
								Content="@Sector"
								Grid.Column="0"
								Grid.Row="1"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Margin="8,3,7,7" />
							<ComboBox
								ItemsSource="{Binding MADSectors}"
								SelectedItem="{Binding SelectedMADSector, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
								Grid.Column="1"
								Grid.Row="1"
								HorizontalAlignment="Stretch"
								Margin="8,7.00000000000003,7,7" />
							<Grid
								Grid.Column="0"
								Grid.ColumnSpan="5"
								Grid.Row="4"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Margin="0,1,-1,-1">
								<GroupBox
									Header="Key - Current"
									Grid.Column="0"
									Grid.Row="0"
									HorizontalAlignment="Stretch"
									VerticalAlignment="Stretch"
									Margin="8,8,7,0">
									<Grid>
										<Grid.RowDefinitions>
											<RowDefinition
												Height="42" />
											<RowDefinition
												Height="36" />
											<RowDefinition
												Height="*" />
										</Grid.RowDefinitions>
										<Grid.ColumnDefinitions>
											<ColumnDefinition
												Width="110.554888163972" />
											<ColumnDefinition
												Width="*" />
										</Grid.ColumnDefinitions>
										<Label
											Content="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='labelContentMifareClassicSetupKeyAValue' }"
											Grid.Column="0"
											Grid.Row="0"
											HorizontalAlignment="Stretch"
											VerticalAlignment="Stretch"
											Margin="8,8,7,8" />
										<Label
											Content="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='labelContentMifareClassicSetupKeyBValue' }"
											Grid.Column="0"
											Grid.Row="1"
											HorizontalAlignment="Stretch"
											VerticalAlignment="Stretch"
											Margin="8,3,7,7" />
										<TextBox
											Text="{Binding ClassicKeyAKeyCurrent, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
											IsEnabled="False"
											FontFamily="Lucida Console"
											HorizontalContentAlignment="Left"
											VerticalContentAlignment="Center"
											Grid.Column="1"
											Grid.Row="0"
											HorizontalAlignment="Stretch"
											VerticalAlignment="Stretch"
											Margin="9,8,7,8">
											<TextBox.Resources>
												<Style
													TargetType="TextBox">
													<Style.Triggers>
														<DataTrigger
															Binding="{Binding IsValidClassicKeyAKeyCurrent}"
															Value="True">
															<Setter
																Property="Foreground"
																Value="Green" />
															<Setter
																Property="Background"
																Value="White" />
															<Setter
																Property="FontWeight"
																Value="Normal" />
														</DataTrigger>
														<DataTrigger
															Binding="{Binding IsValidClassicKeyAKeyCurrent}"
															Value="False">
															<Setter
																Property="Foreground"
																Value="Black" />
															<Setter
																Property="Background"
																Value="Red" />
															<Setter
																Property="FontWeight"
																Value="Normal" />
														</DataTrigger>
													</Style.Triggers>
												</Style>
											</TextBox.Resources>
										</TextBox>
										<TextBox
											Text="{Binding ClassicKeyBKeyCurrent, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
											IsEnabled="False"
											FontFamily="Lucida Console"
											HorizontalContentAlignment="Left"
											VerticalContentAlignment="Center"
											Grid.Column="1"
											Grid.Row="1"
											HorizontalAlignment="Stretch"
											VerticalAlignment="Stretch"
											Margin="9,3,7,7">
											<TextBox.Resources>
												<Style
													TargetType="TextBox">
													<Style.Triggers>
														<DataTrigger
															Binding="{Binding IsValidClassicKeyBKeyCurrent}"
															Value="True">
															<Setter
																Property="Foreground"
																Value="Green" />
															<Setter
																Property="Background"
																Value="White" />
															<Setter
																Property="FontWeight"
																Value="Normal" />
														</DataTrigger>
														<DataTrigger
															Binding="{Binding IsValidClassicKeyBKeyCurrent}"
															Value="False">
															<Setter
																Property="Foreground"
																Value="Black" />
															<Setter
																Property="Background"
																Value="Red" />
															<Setter
																Property="FontWeight"
																Value="Normal" />
														</DataTrigger>
													</Style.Triggers>
												</Style>
											</TextBox.Resources>
										</TextBox>
									</Grid>
								</GroupBox>
								<GroupBox
									Grid.Column="1"
									Grid.Row="0"
									HorizontalAlignment="Stretch"
									VerticalAlignment="Stretch"
									Margin="2.50000000000023,8,8,0"
									Header="Key - Target">
									<Grid>
										<Grid.RowDefinitions>
											<RowDefinition
												Height="42" />
											<RowDefinition
												Height="36" />
											<RowDefinition
												Height="36" />
											<RowDefinition
												Height="*" />
										</Grid.RowDefinitions>
										<Grid.ColumnDefinitions>
											<ColumnDefinition
												Width="110.554888163972" />
											<ColumnDefinition
												Width="*" />
										</Grid.ColumnDefinitions>
										<Label
											Content="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='labelContentMifareClassicSetupKeyAValue' }"
											Grid.Column="0"
											Grid.Row="0"
											HorizontalAlignment="Stretch"
											VerticalAlignment="Stretch"
											Margin="8,8,7,8" />
										<Label
											Content="{Binding LocalizationResourceSet,Converter={StaticResource Localization},ConverterParameter='labelContentMifareClassicSetupKeyBValue' }"
											Grid.Column="0"
											Grid.Row="1"
											HorizontalAlignment="Stretch"
											VerticalAlignment="Stretch"
											Margin="8,3,7,7" />
										<TextBox
											Text="{Binding ClassicKeyAKeyTarget, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
											FontFamily="Lucida Console"
											HorizontalContentAlignment="Left"
											VerticalContentAlignment="Center"
											Grid.Column="1"
											Grid.Row="0"
											HorizontalAlignment="Stretch"
											VerticalAlignment="Stretch"
											Margin="9,8,7,8">
											<TextBox.Resources>
												<Style
													TargetType="TextBox">
													<Style.Triggers>
														<DataTrigger
															Binding="{Binding IsValidClassicKeyAKeyTarget}"
															Value="True">
															<Setter
																Property="Foreground"
																Value="Green" />
															<Setter
																Property="Background"
																Value="White" />
															<Setter
																Property="FontWeight"
																Value="Normal" />
														</DataTrigger>
														<DataTrigger
															Binding="{Binding IsValidClassicKeyAKeyTarget}"
															Value="False">
															<Setter
																Property="Foreground"
																Value="Black" />
															<Setter
																Property="Background"
																Value="Red" />
															<Setter
																Property="FontWeight"
																Value="Normal" />
														</DataTrigger>
													</Style.Triggers>
												</Style>
											</TextBox.Resources>
										</TextBox>
										<TextBox
											Text="{Binding ClassicKeyBKeyTarget, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
											FontFamily="Lucida Console"
											HorizontalContentAlignment="Left"
											VerticalContentAlignment="Center"
											Grid.Column="1"
											Grid.Row="1"
											HorizontalAlignment="Stretch"
											VerticalAlignment="Stretch"
											Margin="9,3,7,7">
											<TextBox.Resources>
												<Style
													TargetType="TextBox">
													<Style.Triggers>
														<DataTrigger
															Binding="{Binding IsValidClassicKeyBKeyTarget}"
															Value="True">
															<Setter
																Property="Foreground"
																Value="Green" />
															<Setter
																Property="Background"
																Value="White" />
															<Setter
																Property="FontWeight"
																Value="Normal" />
														</DataTrigger>
														<DataTrigger
															Binding="{Binding IsValidClassicKeyBKeyTarget}"
															Value="False">
															<Setter
																Property="Foreground"
																Value="Black" />
															<Setter
																Property="Background"
																Value="Red" />
															<Setter
																Property="FontWeight"
																Value="Normal" />
														</DataTrigger>
													</Style.Triggers>
												</Style>
											</TextBox.Resources>
										</TextBox>
									</Grid>
								</GroupBox>
								<Grid.ColumnDefinitions>
									<ColumnDefinition
										Width="0.492234640503342*" />
									<ColumnDefinition
										Width="0.507765359496658*" />
								</Grid.ColumnDefinitions>
							</Grid>
							<CheckBox
								Content="Use MAD Authentification"
								IsChecked="{Binding UseMadAuth, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
								Height="15"
								Grid.Column="0"
								Grid.ColumnSpan="2"
								Grid.Row="2"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Top"
								Margin="8,9,7,0" />
							<Label
								Content="Size"
								Grid.Column="0"
								Grid.Row="3"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Margin="8,3,68,7" />
							<TextBox
								Text="{Binding FileSize, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
								HorizontalContentAlignment="Left"
								VerticalContentAlignment="Center"
								Height="26"
								Grid.Column="1"
								Grid.Row="3"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Top"
								Margin="9,3,7,0" >
								
								<TextBox.Resources>
									<Style
										TargetType="TextBox">
										<Style.Triggers>
											<DataTrigger
												Binding="{Binding IsValidFileSize}"
												Value="True">
												<Setter
													Property="Foreground"
													Value="Green" />
												<Setter
													Property="Background"
													Value="White" />
												<Setter
													Property="FontWeight"
													Value="Normal" />
											</DataTrigger>
											<DataTrigger
												Binding="{Binding IsValidFileSize}"
												Value="False">
												<Setter
													Property="Foreground"
													Value="Black" />
												<Setter
													Property="Background"
													Value="Red" />
												<Setter
													Property="FontWeight"
													Value="Normal" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</TextBox.Resources>
							</TextBox>
							<TextBox
								Text="{Binding AppNumber, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
								HorizontalContentAlignment="Left"
								VerticalContentAlignment="Center"
								Grid.Column="1"
								Grid.Row="0"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Margin="9,8,8,8">
								<TextBox.Resources>
									<Style
										TargetType="TextBox">
										<Style.Triggers>
											<DataTrigger
												Binding="{Binding IsValidAppNumber}"
												Value="True">
												<Setter
													Property="Foreground"
													Value="Green" />
												<Setter
													Property="Background"
													Value="White" />
												<Setter
													Property="FontWeight"
													Value="Normal" />
											</DataTrigger>
											<DataTrigger
												Binding="{Binding IsValidAppNumber}"
												Value="False">
												<Setter
													Property="Foreground"
													Value="Black" />
												<Setter
													Property="Background"
													Value="Red" />
												<Setter
													Property="FontWeight"
													Value="Normal" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</TextBox.Resources>
							</TextBox>
							<Grid.ColumnDefinitions>
								<ColumnDefinition
									Width="180" />
								<ColumnDefinition
									Width="120" />
								<ColumnDefinition
									Width="120" />
								<ColumnDefinition
									Width="119.380071130415" />
								<ColumnDefinition
									Width="0.226403426792149*" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition
									Height="36" />
								<RowDefinition
									Height="36" />
								<RowDefinition
									Height="36" />
								<RowDefinition
									Height="36" />
								<RowDefinition
									Height="*" />
							</Grid.RowDefinitions>
						</Grid>
					</GroupBox>
					<Grid.ColumnDefinitions>
						<ColumnDefinition
							Width="186" />
						<ColumnDefinition
							Width="181*" />
					</Grid.ColumnDefinitions>
					<Grid.RowDefinitions>
						<RowDefinition
							Height="80.7203331950994" />
						<RowDefinition
							Height="0.352718148131878*" />
						<RowDefinition
							Height="36" />
						<RowDefinition
							Height="36" />
					</Grid.RowDefinitions>
				</Grid>
			</GroupBox>
			<Grid.RowDefinitions>
				<RowDefinition
					Height="0.5*" />
				<RowDefinition
					Height="0.5*" />
			</Grid.RowDefinitions>
		</Grid>
	</Grid>
</UserControl>